#include <dummy.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <ESP8266HTTPClient.h>

MDNSResponder mdns;
ESP8266WebServer server(80);
String webPage;

//SSD tavo interneto
char ssid[] = "Nelys";
char pass[] = "11111111";

//=============Device info==============
/*char getSerialNumber[] = "F17M24Z5FF9R";
char getModel[] = "ME323LL/A";
int getId = 2;
char getLabel[] = "Test Lightbulb";
//=====================================
*/
//char PIN[] = "031-45-154";
int PORT = 8080;
const char* SERVICE_TYPE = "_hap._tcp.local.";
//char PKEY = "[B@1f17ae12";                           // byte
//int SALT = -166283850131370039115941186433991875748; // big integer
const char* MAC = "b2:91:69:4:f7:2d";                       // string
const char* LABEL = "Test Lightbulb";
//====================================
char PIN[] = "031-45-154";
//int Salt = 20371191262924984306166173151687119334;
const char* state = "INIT";
const char* I = "Pair-Setup";
/*int s = 20371191262924984306166173151687119334;
int v = 2545527929538079853039619175930058372521497445117172805092396609567998360629809667114694773119953353416694691107767318823243544823753330801359247475848667967697793539179601604947255907628927319148009791804559817299900049394905810360561893948894227364686738583716805229999573954387219244978993517792312647566030304028376067632661600861237507481070788633666027101146787107609814548567410671239236114376912464572687722065082142947196780719692535277843662687980815910431952031564688341529932247803155565100956804526208048621721349194667189990281246328759688407670428997773583581145963455673147694470420536792726102574393212596114052954417803274916294552524999222164595265603867126879897377931765642103104817358176576403118513190680721657567799845867546657386813735316627640758230596206093745626161958725596403702141409282728094633084738253373834815216216437479586130025506931134841811373027835729082943814255255401238343784136111;
int k = 8891118944006259431156568541843809053371474718154946070525699599564743247786811275097952247025117806925219847643897478119979876683245412022290811230509536;
int b = 1724136281246764558260515393645315423015583762057519557043253355528273169401018299273096967574709775560781690632768457761997998722698065495581613809807906522977817602363387641015304381883868060236656992497995552363900059252976107390908539009070601170556656419708380820676754605535816718916751965414305437976894872816628531388517277095250094376202063678713901291202352059153079132481278891573694703350642586752161027622400033656505892141963174819551017405220694976795629630778065814977208640728106167094782187369444307101047102066741848866245163150884889789036590968785591076293903853636146008650130216466055840428340289226443066413416145094429331516247850977465708075055408984574053155272419928096578809479479941409124048601921632364985430918319762676177473389139082230642344931611448548679964341918914361031558607191121380910645025275931790219870277635823916274127558345653684357510696056735328971571895803348936065354498072;
int B = 3044693289368882844761647176739631169663836582173150558396549470719897371655997356803224026556246185586759544787256362397558680172731866612667954306963982177999278976828917660722851377828272913372951111200228451939217512262387346563123182948256711652774230588840374382437838790701675340252216400009742262870338273040074427794167243568201517442207815494031722842541081026710355850696793147890213259059797149416742976167504943747362268804233320578123105180734321450569377979647382882162292606105434529201004116512017057294110983959520724487696116400294851106503503093015372938603612409686571216442019476421497188137201191476329221589738637975446844988621131770596656223880435203516580113042161395042328491510122335673622347710343954172953646527984187845069262917206263917927229970860114668761676847937733106889058622351652669584039370869170962496920891691196456067197028845928749596414896375957759400043884912710381754332278535;
*/
const char* state1 = "STEP_1";
/*int A = 1108398515873182160559274557819109095893390212297106423886774519748776155812874329738254280783885426632529192007158956913842881931352104309231205361521607409814840072677247142339002412667387211656984883371448662982114744569462206184588412457499913660588985660758753369403987954492778017449926175981610417230204401119885477157751498150364238517305768269483066396185310971069974596089952028045522945659273983898524216822413795814558754771053907696563066770343882855905340703591192710794705045154516031141680317985291510516317833992430242074218221617529619537565173295556124304678357871495805617499436494912620405123260749555280130653394319203508702945001557191951117784611974217835556950092861559518940569461475948925051249898082569182609602126935541487392404620280112336125163864728064539885002748062044818653175293453270541669987240696751332657853323283366465318226209833615876779484496063171697503606424470290576061712795402;
int M1 = 5113204150753493328872608173423910067740142275872766032122413023423105804119366274410815833512586063002528604548988294812953177940469669997313138955453061;
int u = 11630572156775139413519865040258717183221584424903616161754652045862443035167850863797009028263096020873939957323996334440662614202226018110200754990961497;
int S = 3757080230930247560100211692350048538418896100223864823599582620797689850862767334737404337859541711911005418385172000659151802670200893234546126753267738713802615415296220347489851637070649208916625513238989769496095824245233090015357398858965021427911412482226800427026660304255616397534376646786115216516467969765404173271181117748504244016987799119342332076673043546915546268810321959415876960181270411809406920028041305356194635480374820784430962783697147978904182604458053673982969733394008960690653812407338599644817475595715122595366130307429205928077003032925617091509779041585969139134117598496982001516496992851209451286237079672524468195846334416655427369169871131849128908784093432099303915154206815045874359065969806384217830166593057977534077498282372401469224611765211919994056304687425208317987915239499227511227895038294922329183120584328343186028617470754590393075327993039964154686743170970261374883590464;
int M2 = 1958431004737633391163725006495432329288564850076871924466161776286010795953080126367979284453762563971375067289226446031496191430016962638917109093301886;
*/
void setup()
{
	//pinMode(16, OUTPUT);
	pinMode(LED_BUILTIN, OUTPUT);
	webPage += "<h1>ESP8266 Web Server</h1><p>Socket #1 ";
	webPage += "<a href=\"socket1On\"><button>ON</button></a>&nbsp;";
	webPage += "<a href=\"socket1Off\"><button>OFF</button></a></p>";

	Serial.println();
	Serial.println();
	Serial.begin(300);
	delay(100);
	//prisijungimas prie wifi
	Serial.print("\n");
	Serial.print("Jungiamasis prie ...");
	Serial.print(ssid);
	WiFi.mode(WIFI_STA);
	WiFi.hostname("Homekit");
	WiFi.begin(ssid, pass);

	while (WiFi.status() != WL_CONNECTED)
	{
		delay(500);
		Serial.print(".");
	}

	Serial.print("");
	Serial.println("WiFi prisujungë sëkmingai");
	Serial.print("IP andresas: ");
	Serial.println(WiFi.localIP());
	Serial.println(WiFi.hostname());

	if (mdns.begin("esp8266", WiFi.localIP()))
	{
		Serial.println("MDNS responder started");
	}

	server.on("/", []() {server.send(200, "text/plain", "Hello World!"); });
	server.on("/socket1Off", []()
	{
		server.send(200, "text/html", webPage);
		//Turn off LED
		digitalWrite(LED_BUILTIN, HIGH);
		Serial.println("Off");
		delay(1000);
	});

	server.on("/socket1On", []() {
		server.send(200, "text/html", webPage);
		//Turn on LED
		digitalWrite(LED_BUILTIN, LOW);
		Serial.println("On");
		delay(1000);
	});

	server.begin();
	Serial.println("HTTP server started");
	mdns.begin("Homekit");
	mdns.addService("hap", "tcp", 80);

	mdns.addServiceTxt("hap", "tcp", "md", "homekit");
	// mdns.addServiceTxt("hap", "tcp", "pv", "1.0");
	mdns.addServiceTxt("hap", "tcp", "id", MAC);
	mdns.addServiceTxt("hap", "tcp", "c#", "1");
	mdns.addServiceTxt("hap", "tcp", "s#", "1");
	mdns.addServiceTxt("hap", "tcp", "ff", "0");
	mdns.addServiceTxt("hap", "tcp", "ci", "1");
	mdns.addServiceTxt("hap", "tcp", "sf", "1");
}

void loop()
{
	//Serial.print("prisijungta prie ");
	server.handleClient();
	//Serial.print(WiFi.localIP());
}

//mdns browser to iphone


/*
*MockAuthInfo.java get pin 031-45-154
*MockAuthInfo.java getSalt 45765995399244520788111459693032478284
*HomekitSRP6ServerSession.java User ID -> Pair-Setup
*HomekitSRP6ServerSession.java salt 's' -> 45765995399244520788111459693032478284
*HomekitSRP6ServerSession.java verifier 'v' -> 1722699982585030276530384602110532469565938971689631210101740157240178818123923700291401553300982372414767050031749276136346627767094241813795637058682763159473824680308327669449330499513790972519555420861143438475527410135686940314263678656519743284581613314121995650865064075956594330081638582355055648533517518320240595232129275980478903696717612338126968303888210552217879829572792543175430486144231662243374203427686580950957680488222677004093057028581865956817745712153594752335747917096020639803376063617498526639231229689909817887013470725473464886018840068831472734902669736807109414559899644298064383897658631824189754377227913307926368405195040451853390526433209101348251205971232145936136483863790114190553974976025234739502666191930362150930722322373604222338426146384023774619211046455227561289709895504534521424333498665501699339501359402474175921850786681970825025602632749757543161915738678470166139670949955
HomekitSRP6ServerSession.java Then Client public value -> 5418075884214301010187249150085103383986657458220658817692833295537756923662995674699429416122890121669692611938307079872153738545004341611821702435468103584960321697750488396332658320735544532683891936459524189836020320159199714243842565450275969470283315755994232034725207034331880417965310564467248869703787099603723893571991647022994582509303470516736775510707629421735047163478231034305763670206045604378263772743982614317190901254952527856825993801472918544805097655203540874884174049762731530302424234306879577856717725331876802712197665865841600655425499169223661695583903723689176355006724683764358110121667903597283859772328703534102962225213703042134783472107235305228785369688491782559110586218395031889566897909036155176533066363164137134838115040170719037614809290709989205798273990418786795464156033482367272846614200146069589327509867602589351729295456032669599582895780912967031227061981624434995846889810015
HomekitSRP6ServerSession.java M1 -> 10522478050966934712950479144504502816439052417795441121977491876859349638690464250553643501138126647888849314991307569925897983639828547193393060442034793
HomekitSRP6ServerSession.java M2 -> 11717820648830228570732991153220981688310360960746935553078290635187931561455455695204212318224063350553873218392086070671787821674807045298578696691772668
MockAuthInfo.java GetMAc be:cb:ca:88:a1:43
MockAuthInfo.java Added pairing for be:cb:ca:88:a1:434D6E99BD-F600-40E7-9CC6-9C07D3735CFA
MockAuthInfo.java public key [B@2fb1fa36
MockAuthInfo.java getPrivateKey() [-37, 51, -11, 37, -8, -72, 32, -21, 80, 116, 60, 52, -17, -55, -23, -91, -121, -52, 27, 23, 95, -123, -105, 126, -79, -33, -3, 30, 81, -30, 7, -10]
MockAuthInfo.java GetMAc be:cb:ca:88:a1:43
MockAuthInfo.java GetMAc be:cb:ca:88:a1:43
Lie 22, 2018 11:10:18 PM io.netty.handler.logging.LoggingHandler logMessage
INFO: [id: 0xb0a1d668, /0:0:0:0:0:0:0:0:9123] RECEIVED: [id: 0xe56a5dab, /192.168.43.249:61286 => /192.168.43.76:9123]
MockAuthInfo.java GetMAc be:cb:ca:88:a1:43
MockAuthInfo.java getPrivateKey() [-37, 51, -11, 37, -8, -72, 32, -21, 80, 116, 60, 52, -17, -55, -23, -91, -121, -52, 27, 23, 95, -123, -105, 126, -79, -33, -3, 30, 81, -30, 7, -10]
MockAuthInfo.java GetMAc be:cb:ca:88:a1:43
MockAuthInfo.java GetMAc be:cb:ca:88:a1:43
MockAuthInfo.java getUserPublicKey() [100, -63, -8, 29, 16, -63, 124, -70, 72, 54, 4, -14, 120, 101, 19, 73, -127, -56, 20, -43, -111, 62, 16, -24, -45, 50, 61, 86, -116, -73, -113, 51]

*/

